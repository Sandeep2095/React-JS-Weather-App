{"version":3,"sources":["../../../tailwind Css/weather/src/App.js","../../../tailwind Css/weather/src/reportWebVitals.js","../../../tailwind Css/weather/src/index.js"],"names":["api","key","base","App","_useState","useState","_useState2","Object","slicedToArray","query","setQuery","_useState3","_useState4","weather","setWeather","react_default","a","createElement","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","fetch","concat","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"kJACMA,EAAM,CACVC,IAAK,mCACLC,KAAM,4CAoEOC,MAjEf,WACE,IAAAC,EAA0BC,mBAAS,IAAnCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAcI,EAAdJ,EAAA,GACAK,EAA8BN,mBAAS,IAAvCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAAOE,EAAPD,EAAA,GAAgBE,EAAhBF,EAAA,GA8BA,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAmC,oBAAhBL,EAAQM,MAAyBN,EAAQM,KAAKC,KAAO,GAAM,WAAsB,OACvGL,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAId,EAASc,EAAEC,OAAOC,QACjCA,MAAOjB,EACPkB,WAtCK,SAAAC,GACG,UAAZA,EAAI3B,KACN4B,MAAK,GAAAC,OAAI9B,EAAIE,KAAR,cAAA4B,OAAyBrB,EAAzB,wBAAAqB,OAAqD9B,EAAIC,MAG3D8B,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJpB,EAAWoB,GACXxB,EAAS,IACTyB,QAAQC,IAAIF,SAgCW,oBAAhBrB,EAAQM,KACfJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYL,EAAQwB,KAAnC,KAA2CxB,EAAQyB,IAAIC,SACvDxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QA/BP,SAACsB,GACnB,IAIIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAC5E,YAAa,UAAW,WAAY,YAKnBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAGb,SAAAlB,OAAUW,EAAV,KAAAX,OAAiBa,EAAjB,KAAAb,OAAyBe,EAAzB,KAAAf,OAAkCiB,GAoBDE,CAAY,IAAIC,QAGzCnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQiC,KAAKC,MAAMvC,EAAQM,KAAKC,MAA/C,SACAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWL,EAAQA,QAAQ,GAAGM,QAI9C,MCpDEkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAhC,EAAA,GAAAO,KAAAyB,EAAAC,KAAA,UAAqB1B,KAAK,SAAA2B,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDdU,IAASC,OACPlD,EAAAC,EAAAC,cAACF,EAAAC,EAAMkD,WAAP,KACEnD,EAAAC,EAAAC,cAACkD,EAAD,OAEFC,SAASC,eAAe,SAM1BhB","file":"static/js/main.58774b60.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nconst api = {\n  key: \"81b32d10edbbc49d9463b7ad09ac5399\",\n  base: \"https://api.openweathermap.org/data/2.5/\" //api.openweathermap.org/data/2.5/weather?q={city name}&appid=\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        //const result = await res.json();\n        //console.log(result);\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",\n      \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    // let date = String(new window.Date())\n    // date = date.slice(3, 15)\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != 'undefined') ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n\n            <div className=\"weather-box\">\n              <div className=\"temp\">{Math.round(weather.main.temp)}Â°c</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n\n          </div>\n        ) : ('')}\n\n      </main>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}